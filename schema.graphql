enum CatAttribute {
  health
  cuteness
  knowledge
}

enum CatStatus {
  inHouse
  stray
  finished
}

type Cat {
  id: ID!
  name: String!
  imgUrl: String!
  health: Int!
  cuteness: Int!
  knowledge: Int!
  age: Int!
  owner: User!
  eventHistories: [EventHistory!]!
  status: CatStatus!
}

type User {
  id: ID!
  name: String!
  cats: [Cat!]!
}

type EventEffect {
  key: CatAttribute
  delta: Int!
}

type Event {
  id: ID!
  imgUrl: String!
  # Required cat status that this event can happen to
  status: CatStatus!
  # Event title
  title: String
  # Event content
  content: String!
  # Optional result message after user's selection
  result: String
  # Effects when selecting yes
  yesEffects: [EventEffect!]!
  # Effects when selecting no
  noEffects: [EventEffect!]!
}

type EventHistory {
  id: ID!
  date: Date!
  cat: Cat!
  event: Event!
}

scalar Date

type Query {
  cat(id: ID!): Cat
  cats(ownerId: ID!): [Cat!]!
  events(status: CatStatus!): [Event!]!
  eventHistory(id: ID!): EventHistory
  eventHistories(catId: ID!): [EventHistory!]!
  user(id: ID!): User
  users: [User!]!
}

input CatInput {
  name: String
  knowledge: Int
  cuteness: Int
  health: Int
  ownerId: ID
}

type Mutation {
  createCat(ownerId: ID!, name: String!): Cat!
  updateCat(id: ID!, data: CatInput): Cat!
  deleteCat(id: ID!): Cat!
  createEventHistory(catId: ID!, content: String!): EventHistory!
}
