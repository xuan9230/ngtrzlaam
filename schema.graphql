enum CatAttribute {
  health
  wilderness
  knowledge
}

enum CatStatus {
  inHouse
  stray
  finished
}

type Cat {
  id: ID!
  name: String!
  imgUrl: String!
  health: Int!
  wilderness: Int!
  knowledge: Int!
  age: Int!
  owner: User!
  # Events the cat has triggered
  eventIds: [ID!]!
  status: CatStatus!
}

type User {
  id: ID!
  name: String!
  cats: [Cat!]!
}

type EventEffect {
  key: CatAttribute
  delta: Int!
}

type Event {
  id: ID!
  imgUrl: String!
  # Required cat status that this event can happen to
  status: CatStatus!
  # Event title
  title: String
  # Event content
  content: String!
  # Optional result message after user's selection
  result: String
  # Effects when selecting yes
  yesEffects: [EventEffect!]!
  # Effects when selecting no
  noEffects: [EventEffect!]!
}

# scalar Date

input CatInput {
  name: String
  knowledge: Int
  wilderness: Int
  health: Int
  ownerId: ID
}

type Query {
  cat(id: ID!): Cat
  cats(ownerId: ID!): [Cat!]!
  events(catId: ID!): [Event!]!
  user(id: ID!): User
  users: [User!]!
}

type Mutation {
  createCat(ownerId: ID!, name: String!): Cat!
  updateCat(id: ID!, updates: CatInput): Cat!
  deleteCat(id: ID!): Cat!
}

schema {
  query: Query
  mutation: Mutation
}
